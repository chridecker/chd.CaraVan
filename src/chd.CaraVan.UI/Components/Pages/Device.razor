@page "/device/{Id:int}"
@using Microsoft.Extensions.Options
@using chd.CaraVan.Contracts.Dtos
@using chd.CaraVan.Contracts.Settings
@using chd.CaraVan.UI.Components.Pages.Charts
@using chd.CaraVan.UI.Implementations
@inject IOptionsMonitor<DeviceSettings> options
@inject IDataService dataService
<h3>@options.CurrentValue.Devices.FirstOrDefault(x => x.Id == this.Id).Name</h3>

@if (data != null && data.Any())
{
    <DeviceChart Data="@data" XLables="@dataLabels"></DeviceChart>
}

@code {
    [Parameter] public int Id { get; set; }

    private DeviceDto device => options.CurrentValue.Devices.FirstOrDefault(x => x.Id == this.Id);
    private IDictionary<string, IEnumerable<double>> data;
    private IEnumerable<string> dataLabels;

    protected override async Task OnParametersSetAsync()
    {
        var dataTemp = await this.dataService.GetDeviceDataAsync(this.device.Id, Contracts.Enums.EDataType.Temperature, DateTime.Now.AddHours(-1), DateTime.Now);
        var dataHumitity = await this.dataService.GetDeviceDataAsync(this.device.Id, Contracts.Enums.EDataType.Humidity, DateTime.Now.AddHours(-1), DateTime.Now);

        data = new Dictionary<string, IEnumerable<double>>
        {
            {"Temperatur",dataTemp.Select(s => (double)s.Value)},
            {"Luftfeuchtigkeit",dataHumitity.Select(s => (double)s.Value)},
        };
        dataLabels = dataTemp.Select(s => s.RecordDateTime.ToString("HH:mm:ss"));

        await base.OnParametersSetAsync();
    }

}
