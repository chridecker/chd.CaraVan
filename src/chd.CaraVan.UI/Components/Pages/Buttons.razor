@page "/buttons"
@inject IAESManager manager
@inject IPiManager piManager

@using chd.CaraVan.Devices
@using chd.CaraVan.Devices.Contracts.Dtos.Pi
@using chd.CaraVan.UI.Components.Pages.Cards

@if (this._settings is not null)
{

    <div style="display:grid">
        @foreach (var pin in this._settings.Gpios.Where(x => x.Type != Devices.Contracts.Enums.GpioType.None).OrderByDescending(o => o.Type).ThenBy(t => t.Name))
        {
            <SmartButton Checked="this.State(pin)" CheckedChanged="(x)=>Change(pin,x)" Text="@pin.Name"></SmartButton>
        }
        }
    </div>
}
@code {
    private PiSettings _settings;

    protected override async Task OnInitializedAsync()
    {
        this._settings = await piManager.GetSettings();

        await base.OnInitializedAsync();
    }

    private async Task<bool> State(Gpio pin)
    {
        if (pin.Type == Devices.Contracts.Enums.GpioType.Aes)
        {
            return await manager.IsActive;
        }
        else if (pin.Type == Devices.Contracts.Enums.GpioType.Switch)
        {
            return await piManager.Read(pin.Pin);
        }
        return false;
    }
    private async Task Change(Gpio pin, bool val)
    {
        if (pin.Type == Devices.Contracts.Enums.GpioType.Aes)
        {
            if (val)
            {
                await manager.SetActive();
            }
            else
            {
                await manager.Off();
            }
        }
        else if (pin.Type == Devices.Contracts.Enums.GpioType.Switch)
        {
            await piManager.Write(pin.Pin, val);
        }
    }
}
