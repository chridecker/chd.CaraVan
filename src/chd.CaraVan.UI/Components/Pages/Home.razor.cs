// <auto-generated/>
using chd.CaraVan.Contracts.Dtos;
using chd.CaraVan.Contracts.Enums;
using chd.CaraVan.Contracts.Settings;
using chd.CaraVan.UI.Hubs.Clients;
using chd.CaraVan.UI.Implementations;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;

namespace chd.CaraVan.UI.Components.Pages
{
    public partial class Home : IDisposable
    {
        [Inject] private IVotronicDataService _votronicData { get; set; }
        [Inject] private IVictronDataService _victronDataService { get; set; }
        [Inject] private IRuuviTagDataService _ruuviTagDataService { get; set; }
        [Inject] private IDataHubClient _dataHubClient { get; set; }
        [Inject] private ISettingService _settingService { get; set; }
        [Inject] private NavigationManager? _navigationManager { get; set; }

        private VotronicBatteryData VotronicBatteryData;
        private VotronicSolarData VotronicSolarData;
        private VictronData VictronData;

        private IDictionary<int, RuuviSensorDataDto> _valueDict = new Dictionary<int, RuuviSensorDataDto>();

        private DateTime? RuuviTime(RuuviDeviceDto dto) => this._valueDict.TryGetValue(dto.Id, out var val) ? val?.Record : null;
        private decimal? RuuviValue(RuuviDeviceDto dto) => this._valueDict.TryGetValue(dto.Id, out var val) ? val?.Value : null;
        private (decimal?, decimal?) MinMax(RuuviDeviceDto dto) => this._valueDict.TryGetValue(dto.Id, out var val) ? (val.Min, val.Max) : (null, null);

        private IEnumerable<RuuviDeviceDto> _devices = Enumerable.Empty<RuuviDeviceDto>();

        protected override async Task OnInitializedAsync()
        {
            this._devices = await this._ruuviTagDataService.Devices;
            await this.Reload();
            if (!this._dataHubClient.IsConnected)
            {
                this.StartHub();
            }
            this._dataHubClient.VotronicDataReceived += this._dataHubClient_VotronicDataReceived;
            this._dataHubClient.RuuviTagDeviceDataReceived += this._dataHubClient_RuuviTagDeviceDataReceived;
            this._dataHubClient.VictronDataReceived += this._dataHubClient_VictronDataReceived;

            this.VotronicSolarData = await this._votronicData.GetSolarData();
            this.VotronicBatteryData = await this._votronicData.GetBatteryData();
            this.VictronData = await this._victronDataService.GetData();

            await base.OnInitializedAsync();
        }

        private async Task Reload()
        {
            foreach (var device in this._devices)
            {
                var data = await this._ruuviTagDataService.GetData(device.Id);
                if (data is not null)
                {
                    this._valueDict[device.Id] = data;
                }
            }
        }

        private async void _dataHubClient_VictronDataReceived(object sender, EventArgs e)
        {
            this.VictronData = await this._victronDataService.GetData();
            await this.InvokeAsync(this.StateHasChanged);
        }

        private async void _dataHubClient_RuuviTagDeviceDataReceived(object sender, EventArgs e)
        {
            await this.Reload();
            await this.InvokeAsync(this.StateHasChanged);
        }

        private async void _dataHubClient_VotronicDataReceived(object sender, EventArgs e)
        {
            this.VotronicSolarData = await this._votronicData.GetSolarData();
            this.VotronicBatteryData = await this._votronicData.GetBatteryData();
            await this.InvokeAsync(this.StateHasChanged);
        }

        private void StartHub() => Task.Run(async () => await this._dataHubClient.StartAsync(this._settingService.GetDataHubUri(this._navigationManager)));
        public void Dispose()
        {
            this._dataHubClient.VotronicDataReceived -= this._dataHubClient_VotronicDataReceived;
        }
    }
}