@using Microsoft.Extensions.Options
@implements IDisposable

@inject IAESManager manager

<div class="aes-control">
    <div class="aes-control-content">
        <div class="aes-active">
            <SmartButton Checked="@manager.IsActive" CheckedChanged="@OnAesButtonChanged" ButtonTextOn="AES" ButtonTextOff="AES" />
        </div>
        <div class="aes-active-content">
            <div class="aes-active-battery-limit">@(_batteryLimit.HasValue ? $"Batterie-Limit: {_batteryLimit.Value.ToString("n0")}%" : "")</div>
            <div class="aes-active-battery-amp-limit">@(_solarAmpLimit.HasValue ? $"Solar-Limit: {_solarAmpLimit.Value.ToString("n0")}A" : "")</div>
            <div class="aes-active-since">@((_aesOffSince.HasValue && _aesTimeout.HasValue) ? $"aus um {_aesOffSince.Value.Add(_aesTimeout.Value).ToString("HH:mm")}" : "kein Timeout")</div>
        </div>
    </div>
</div>



@code {
    private decimal? _batteryLimit;
    private decimal? _solarAmpLimit;
    private TimeSpan? _aesTimeout;
    private DateTime? _aesOffSince;

    protected override async Task OnInitializedAsync()
    {
        manager.StateSwitched += StateSwitched;
        await this.Reload();
        await base.OnInitializedAsync();
    }

  
    private async Task Reload()
    {
        this._aesOffSince = await manager.SolarAesOffSince;
        this._aesTimeout = await manager.AesTimeout;
        this._solarAmpLimit = await manager.SolarAmpLimit;
        this._batteryLimit = await manager.BatteryLimit;
    }

    private async void OnAesButtonChanged(bool val)
    {
        if (val)
        {
            await this.manager.SetActive();
        }
        else
        {
            await this.manager.Off();
        }
    }
    private async void StateSwitched(object sender, bool e)
    {
        await this.Reload();
        await this.InvokeAsync(this.StateHasChanged);
    }

    public void Dispose()
    {
        manager.StateSwitched -= StateSwitched;
    }
}
