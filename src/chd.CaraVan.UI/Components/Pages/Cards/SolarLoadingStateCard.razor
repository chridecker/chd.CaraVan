@using chd.CaraVan.Devices.Contracts.Constants
@inject ITypeNameService typeNameService
@inject ISolarStateService solarStateService

<div class="solar-state">
    <MudChip Class="solar-text" T="object" Color="@_color" Variant="Variant.Outlined" Style="margin-top:1rem;">
        <MudIcon Icon="@StateIcon" />
        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center">
            @Value.ToString("n2")
        </MudText>
    </MudChip>
</div>

@code {
    [Parameter] public decimal Value { get; set; }
    [Parameter] public byte State { get; set; }

    private string StateIcon => this.solarStateService.GetState(State) == SolarStateConstants.STANDBY ? Icons.Material.Filled.ModeStandby :
    this.solarStateService.GetState(State) == SolarStateConstants.REDUCE ? Icons.Material.Filled.BatteryChargingFull :
        this.solarStateService.GetState(State) == SolarStateConstants.ACTIVE ? Icons.Material.Filled.SolarPower : Icons.Material.Filled.BatteryUnknown;

    private Color _color => this.solarStateService.GetState(State) == SolarStateConstants.ACTIVE ? Color.Warning :
        this.solarStateService.GetState(State) == SolarStateConstants.REDUCE ? Color.Success :
        this.solarStateService.GetState(State) == SolarStateConstants.STANDBY ? Color.Default
        : Color.Error;
}
