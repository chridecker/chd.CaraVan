@using chd.CaraVan.Devices.Contracts.Constants
@inject ITypeNameService typeNameService
@inject ISolarStateService solarStateService

<div class="solar-state">
    <MudProgressLinear Vertical="false" Color="_colorLoading" Size="Size.Large" Value="@((double)this.Value)" Min="0" Max="20" Style="height: 3rem; width:5rem; margin-left:1rem; margin-top:1rem;">
        <MudText Align="@MudBlazor.Align.Center" Typo="Typo.h5">
            @Value.ToString("n2")@typeNameService.GetName(EDataType.Ampere).Unit
        </MudText>
    </MudProgressLinear>
    <MudChip Class="solar-text" T="object" Color="@_color" Variant="Variant.Outlined" Style="margin-top:1rem;">
        <MudIcon Icon="@StateIcon" />
        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center">
            @this.solarStateService.GetState(State)
        </MudText>
    </MudChip>
</div>

@code {
    [Parameter] public decimal Value { get; set; }
    [Parameter] public byte State { get; set; }

    private string StateIcon => this.solarStateService.GetState(State) == SolarStateConstants.STANDBY ? Icons.Material.Filled.ModeStandby :
    this.solarStateService.GetState(State) == SolarStateConstants.REDUCE ? Icons.Material.Filled.BatteryChargingFull :

        this.solarStateService.GetState(State) == SolarStateConstants.ACTIVE ? Icons.Material.Filled.ChargingStation : Icons.Material.Filled.BatteryUnknown;

    private Color _colorLoading => this.Value <= 0 ? Color.Default : this.Value <= 10 ? Color.Success : Color.Error;

    private Color _color => this.solarStateService.GetState(State) == SolarStateConstants.ACTIVE ? Color.Success :
        this.solarStateService.GetState(State) == SolarStateConstants.REDUCE ? Color.Info :
        this.solarStateService.GetState(State) == SolarStateConstants.STANDBY ? Color.Default
        : Color.Warning;
}
