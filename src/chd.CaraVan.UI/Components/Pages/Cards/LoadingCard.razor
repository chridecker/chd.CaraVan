@using MudBlazor
@inject ISolarStateService stateService

<div class="loading-container">
    <div class="loading-container-date">
        @Time.ToString("HH:mm:ss dd.MM.yy")
    </div>
    <div class="battery-loading-state">
        <div class="battery-pols">
            <div class="current-loading plus">
                <div class="current-loading-bar @_loadingPolPlus"></div>
                <div class="current-loading-state">
                    <div class="current-amp">@_loadingPlus</div>
                </div>
            </div>
            <div class="current-loading minus">
                <div class="current-loading-bar @_loadingPolMinus"></div>
                <div class="current-loading-state">
                    <div class="current-amp">@_loadingMinus</div>
                </div>
            </div>

        </div>
        <div class="battery-charging">
            <div class="battery-loading-state-bar" style="@_loadingState">
                <div class="battery-loading-bar @_loading"></div>
                <div class="battery-loading-state">
                    <div class="battery-loading-state-icon">
                        <MudIcon Color="Color.Dark" Icon="@Icons.Material.Filled.BatteryChargingFull" />
                    </div>
                    <div class="percent">@BatteryPercent.ToString("n0")%</div>
                    <div class="ampH">@BatteryAmpereH.ToString("n0")Ah</div>
                </div>
            </div>
        </div>
    </div>
    <div class="solar-loading-state">
        <div class="current-loading">
            <div class="current-loading-bar @_solarState"></div>
        </div>
        <div class="solar-charging @_solarState">
            <div class="solar-loading-state-bar">
                <div class="solar-loading-state">
                    <div class="solar-loading-state-icon">
                        <MudIcon Color="Color.Dark" Icon="@Icons.Material.Filled.SolarPower" />
                    </div>
                    <div class="amp">@SolarAmpere.ToString("n2")</div>
                    <div class="state">@stateService.GetState(this.SolarState)</div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public DateTime Time { get; set; }
    [Parameter] public decimal BatteryPercent { get; set; }
    [Parameter] public decimal BatteryAmpereH { get; set; }
    [Parameter] public decimal BatteryAmpere { get; set; }
    [Parameter] public decimal SolarAmpere { get; set; }
    [Parameter] public byte SolarState { get; set; }

    private string _loadingPlus => this.BatteryAmpere > 0 ? this.BatteryAmpere.ToString("n2") : string.Empty;
    private string _loadingMinus => this.BatteryAmpere < 0 ? this.BatteryAmpere.ToString("n2") : string.Empty;

    private string _loadingState => $"width: {((decimal)((15 - 1) * 0.01m * this.BatteryPercent)).ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)}rem;";
    private string _loading => this.BatteryAmpere < -0.5m ? "deloading" : this.BatteryAmpere > 0.5m ? "loading" : "none";
    private string _loadingPolPlus => this.BatteryAmpere > 0 ? "loading" : "none";
    private string _loadingPolMinus => this.BatteryAmpere < -0 ? "deloading" : "none";
    private string _solarState => (this.SolarState, int.TryParse(this.SolarState.ToString("X2").Substring(0, 1), out var d), d % 2) switch
    {
        (0, _, _) => "standby",
        (_, true, 0) => "active",
        (_, true, 1) => "reduce",
    };
}
